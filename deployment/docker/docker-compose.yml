services:
  golang-app-cdc-events:
    image: ghcr.io/daf-bridge/kafka-consumer-cdc:latest
    container_name: golang-app-events
    env_file:
      - ./.env
    depends_on:
      - kafka
      # - postgres
      - debezium
      - zookeeper
    volumes:
      - app_data_event:/app
    ports:
      - 32041:8000
    networks:
      - backend

  golang-app-cdc-jobs:
    image: ghcr.io/daf-bridge/kafka-consumer-cdc:latest
    container_name: golang-app-jobs
    env_file:
      - ./.env
    depends_on:
      - kafka
      # - postgres
      - debezium
      - zookeeper
    volumes:
      - app_data_job:/app
    ports:
      - 32042:8001
    networks:
      - backend

  # ta-backend:
  #   image: ghcr.io/daf-bridge/talent-atmos-backend:latest@sha256:3e01ae8603605d0d8e652d30ae0a9be6005cdec195f613429e0de31af4d417da
  #   container_name: ta-backend
  #   restart: unless-stopped
  #   env_file:
  #     - ./<path-to-your-env-file>
  #   depends_on:
  #     - kafka
  #     - golang-app-cdc-events
  #     - postgres
  #     - debezium
  #     - zookeeper
  #   volumes:
  #     - backend_app_data:/backend_app
  #   ports:
  #     - "8080:8080"
  #   networks:
  #     - backend
  #     - data

  recommendation-service:
    image: ghcr.io/daf-bridge/talent-atmos-rec:latest
    container_name: rec-service
    env_file:
      - ./.env
    # depends_on:
    #   - ta-backend
    #   - postgres
    ports:
      - "32043:7000"
    networks:
      - backend

  # postgres:
    # image: postgres:17
    # container_name: postgres-cdc
    # restart: always
    # environment:
    #   POSTGRES_USER: <your-postgres-username>
    #   POSTGRES_PASSWORD: <your-postgres-password>
    #   POSTGRES_DB: <your-postgres-database-name>
    #   PGDATA: /var/lib/postgresql/data
    # volumes:
    #   - postgres_cdc_data:/var/lib/postgresql/data
    # ports:
    #   - 5432
    # command: >
    #   postgres -c wal_level=logical
    #            -c max_wal_senders=5
    #            -c max_replication_slots=5
    # healthcheck:
    #   test: [ "CMD", "pg_isready", "-U", "postgres" ]
    #   interval: 10s
    #   retries: 5
    # networks:
    #   - backend
    #   - data

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://<host-ip-address>:32044
      KAFKA_LISTENER_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_LISTENER_PORT: 32044
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:32044
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # Can use any table that is public in the PostgreSQL
      KAFKA_CREATE_TOPICS: "cdc.public.events:3:1,cdc.public.org_open_jobs:3:1,cdc.public.organizations:3:1"
    ports:
      - "32044:32044"
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "32044" ]
      interval: 10s
      retries: 3
      start_period: 30s
      timeout: 10s

  debezium:
    image: debezium/connect:2.4
    container_name: debezium
    depends_on:
      - postgres
      - kafka
    environment:
      BOOTSTRAP_SERVERS: kafka:32044
      GROUP_ID: "1"
      CONFIG_STORAGE_TOPIC: debezium_config
      OFFSET_STORAGE_TOPIC: debezium_offset
      STATUS_STORAGE_TOPIC: debezium_status
      KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "debezium"
      CONNECT_PLUGIN_PATH: "/kafka/connect"
    ports:
      - "32045:8083"
    networks:
      - backend
      # - data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/" ]
      interval: 10s
      retries: 3
      start_period: 30s
      timeout: 10s

  # pgadmin:
  #   image: dpage/pgadmin4
  #   container_name: pgadmin
  #   depends_on:
  #     - postgres
  #   ports:
  #     - "5050:80"
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: <Your Email for Admin>
  #     PGADMIN_DEFAULT_PASSWORD: <Your Password for Admin>
  #   volumes:
  #     - pgadmin_data:/var/lib/pgadmin
  #   networks:
  #     - data

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    depends_on:
      - kafka
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
    ports:
      - "32046:9000"
    networks:
      - backend

  # jenkins:
  #   image: jenkins/jenkins:jdk21
  #   container_name: jenkins
  #   ports:
  #     - "8081:8080"
  #   volumes:
  #     - jenkins_home:/var/jenkins_home
  #   networks:
  #     - backend

volumes:
  backend_app_data:
  # postgres_cdc_data:
  # pgadmin_data:
  app_data_event:
  app_data_job:
  # jenkins_home:

networks:
  backend:
    driver: bridge
  # data:
  #   driver: bridge