# ASAiASA Web Frontend Development Rules

## Project Structure
This is a React + TypeScript + Vite project with internationalization support.

## Translation Requirements (MANDATORY)
**CRITICAL**: Every time you implement a frontend component or page, you MUST implement both TH (Thai) and EN (English) translations.

### Translation Rules:
1. **NEVER** hardcode text strings in components
2. **ALWAYS** use `useTranslations` hook from next-intl
3. **ALWAYS** add corresponding translations to both:
   - `/messages/en.json`
   - `/messages/th.json`
4. **ALWAYS** follow the existing translation key structure
5. **ALWAYS** test language switching functionality

### Translation Implementation Pattern:
```typescript
import { useTranslations } from 'next-intl';

const Component = () => {
  const t = useTranslations('SectionName');
  
  return (
    <div>
      <h1>{t('title')}</h1>
      <p>{t('description')}</p>
    </div>
  );
};
```

### Translation File Structure:
```json
{
  "SectionName": {
    "title": "English Title",
    "description": "English Description",
    "buttons": {
      "submit": "Submit",
      "cancel": "Cancel"
    }
  }
}
```

## API Integration Rules
1. **ALWAYS** use the provided API client from `/src/services/api.ts`
2. **ALWAYS** follow the API response format:
   ```typescript
   // List Response
   {
     "code": 0,
     "data": [...],
     "page": 1,
     "page_size": 10,
     "total_page": 1,
     "total_data": 1,
     "message": "",
     "data_schema": null
   }
   ```
3. **ALWAYS** use pagination params `_page` and `_pageSize` for list endpoints
4. **ALWAYS** handle loading and error states
5. **ALWAYS** implement proper TypeScript types for API responses

## Component Development Rules
1. **ALWAYS** use TypeScript with proper type definitions
2. **ALWAYS** follow the existing folder structure:
   - Pages: `/src/pages/{page-name}/{page-name}-page.tsx`
   - Components: `/src/components/{category}/{component-name}.tsx`
   - Services: `/src/services/{service-name}.ts`
3. **ALWAYS** use the Layout component for consistent navigation
4. **ALWAYS** implement responsive design (mobile-first)
5. **ALWAYS** use Tailwind CSS for styling
6. **ALWAYS** follow accessibility best practices

## Authentication Rules
1. **ALWAYS** use the provided Google OAuth configuration
2. **ALWAYS** handle authentication state properly
3. **ALWAYS** implement proper error handling for auth flows
4. **ALWAYS** redirect appropriately after login/logout

## Code Quality Rules
1. **ALWAYS** use ESLint and Prettier configurations
2. **ALWAYS** write clean, readable code with proper comments
3. **ALWAYS** implement proper error boundaries
4. **ALWAYS** use React hooks appropriately
5. **ALWAYS** optimize for performance (lazy loading, memoization)

## Environment Configuration
1. **ALWAYS** use the env configuration from `/src/config/env.ts`
2. **NEVER** hardcode environment variables
3. **ALWAYS** provide fallback values for env variables

## Testing Requirements
1. **ALWAYS** test translation switching
2. **ALWAYS** test responsive design
3. **ALWAYS** test API integration
4. **ALWAYS** test error handling

## File Naming Conventions
- Components: `kebab-case.tsx`
- Pages: `{page-name}-page.tsx`
- Services: `kebab-case.ts`
- Types: `kebab-case.ts`

## Import Order
1. React and React-related imports
2. Third-party libraries
3. Internal components and utilities
4. Types and interfaces
5. Styles (if any)

## Error Handling
1. **ALWAYS** implement proper error boundaries
2. **ALWAYS** show user-friendly error messages
3. **ALWAYS** log errors for debugging
4. **ALWAYS** provide fallback UI for failed states

## Performance Optimization
1. **ALWAYS** use React.lazy for code splitting
2. **ALWAYS** implement proper loading states
3. **ALWAYS** optimize images and assets
4. **ALWAYS** use proper caching strategies

## Reminder: TRANSLATION IS MANDATORY
Before completing any frontend implementation, ensure:
- ✅ All text is translated in both EN and TH
- ✅ Translation keys are properly structured
- ✅ Language switching works correctly
- ✅ No hardcoded strings remain in components
